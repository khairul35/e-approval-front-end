{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default (function (options, fieldNames) {\n  var entities = computed(function () {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          pathKeyEntities: {}\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var pathKey = entity.nodes.map(function (node) {\n          return node[fieldNames.value.value];\n        }).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity;\n        // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});","map":{"version":3,"names":["_objectSpread","convertDataToEntities","VALUE_SPLIT","computed","options","fieldNames","entities","value","initWrapper","wrapper","pathKeyEntities","processEntity","entity","pathKey","nodes","map","node","join","key"],"sources":["/Users/dev/e-approver/node_modules/ant-design-vue/es/vc-cascader/hooks/useEntities.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default (function (options, fieldNames) {\n  var entities = computed(function () {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          pathKeyEntities: {}\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var pathKey = entity.nodes.map(function (node) {\n          return node[fieldNames.value.value];\n        }).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity;\n        // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});"],"mappings":"AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,QAAQ,QAAQ,KAAK;AAC9B;AACA,gBAAgB,UAAUC,OAAO,EAAEC,UAAU,EAAE;EAC7C,IAAIC,QAAQ,GAAGH,QAAQ,CAAC,YAAY;IAClC,OAAOF,qBAAqB,CAACG,OAAO,CAACG,KAAK,EAAE;MAC1CF,UAAU,EAAEA,UAAU,CAACE,KAAK;MAC5BC,WAAW,EAAE,SAASA,WAAWA,CAACC,OAAO,EAAE;QACzC,OAAOT,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAES,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;UACnDC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC;MACJ,CAAC;MACDC,aAAa,EAAE,SAASA,aAAaA,CAACC,MAAM,EAAEH,OAAO,EAAE;QACrD,IAAII,OAAO,GAAGD,MAAM,CAACE,KAAK,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;UAC7C,OAAOA,IAAI,CAACX,UAAU,CAACE,KAAK,CAACA,KAAK,CAAC;QACrC,CAAC,CAAC,CAACU,IAAI,CAACf,WAAW,CAAC;QACpBO,OAAO,CAACC,eAAe,CAACG,OAAO,CAAC,GAAGD,MAAM;QACzC;QACA;QACAA,MAAM,CAACM,GAAG,GAAGL,OAAO;MACtB;IACF,CAAC,CAAC,CAACH,eAAe;EACpB,CAAC,CAAC;EACF,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}