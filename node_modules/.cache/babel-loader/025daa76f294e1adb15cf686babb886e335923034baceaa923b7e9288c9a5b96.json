{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n    filterTreeNode = _ref.filterTreeNode,\n    fieldNames = _ref.fieldNames;\n  return computed(function () {\n    var fieldChildren = fieldNames.value.children;\n    var searchValueVal = searchValue.value;\n    var treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    var filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      var upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = [];\n      for (var index = 0, len = list.length; index < len; index++) {\n        var dataNode = list[index];\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({}, fieldChildren, childList)));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});","map":{"version":3,"names":["_defineProperty","_objectSpread","computed","fillLegacyProps","treeData","searchValue","_ref","treeNodeFilterProp","filterTreeNode","fieldNames","fieldChildren","value","children","searchValueVal","treeNodeFilterPropValue","filterOptionFunc","upperStr","toUpperCase","_","dataNode","String","includes","dig","list","keepAll","arguments","length","undefined","res","index","len","match","childList","push"],"sources":["/Users/dev/e-approver/node_modules/ant-design-vue/es/vc-tree-select/hooks/useFilterTreeData.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default (function (treeData, searchValue, _ref) {\n  var treeNodeFilterProp = _ref.treeNodeFilterProp,\n    filterTreeNode = _ref.filterTreeNode,\n    fieldNames = _ref.fieldNames;\n  return computed(function () {\n    var fieldChildren = fieldNames.value.children;\n    var searchValueVal = searchValue.value;\n    var treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    var filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      var upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = function filterOptionFunc(_, dataNode) {\n        var value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = [];\n      for (var index = 0, len = list.length; index < len; index++) {\n        var dataNode = list[index];\n        var children = dataNode[fieldChildren];\n        var match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        var childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_objectSpread(_objectSpread({}, dataNode), {}, _defineProperty({}, fieldChildren, childList)));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});"],"mappings":";AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,aAAa,MAAM,0CAA0C;AACpE,SAASC,QAAQ,QAAQ,KAAK;AAC9B,SAASC,eAAe,QAAQ,qBAAqB;AACrD,gBAAgB,UAAUC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,EAAE;EACrD,IAAIC,kBAAkB,GAAGD,IAAI,CAACC,kBAAkB;IAC9CC,cAAc,GAAGF,IAAI,CAACE,cAAc;IACpCC,UAAU,GAAGH,IAAI,CAACG,UAAU;EAC9B,OAAOP,QAAQ,CAAC,YAAY;IAC1B,IAAIQ,aAAa,GAAGD,UAAU,CAACE,KAAK,CAACC,QAAQ;IAC7C,IAAIC,cAAc,GAAGR,WAAW,CAACM,KAAK;IACtC,IAAIG,uBAAuB,GAAGP,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACI,KAAK;IAC9H,IAAI,CAACE,cAAc,IAAIL,cAAc,CAACG,KAAK,KAAK,KAAK,EAAE;MACrD,OAAOP,QAAQ,CAACO,KAAK;IACvB;IACA,IAAII,gBAAgB;IACpB,IAAI,OAAOP,cAAc,CAACG,KAAK,KAAK,UAAU,EAAE;MAC9CI,gBAAgB,GAAGP,cAAc,CAACG,KAAK;IACzC,CAAC,MAAM;MACL,IAAIK,QAAQ,GAAGH,cAAc,CAACI,WAAW,EAAE;MAC3CF,gBAAgB,GAAG,SAASA,gBAAgBA,CAACG,CAAC,EAAEC,QAAQ,EAAE;QACxD,IAAIR,KAAK,GAAGQ,QAAQ,CAACL,uBAAuB,CAAC;QAC7C,OAAOM,MAAM,CAACT,KAAK,CAAC,CAACM,WAAW,EAAE,CAACI,QAAQ,CAACL,QAAQ,CAAC;MACvD,CAAC;IACH;IACA,SAASM,GAAGA,CAACC,IAAI,EAAE;MACjB,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;MACvF,IAAIG,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAGP,IAAI,CAACG,MAAM,EAAEG,KAAK,GAAGC,GAAG,EAAED,KAAK,EAAE,EAAE;QAC3D,IAAIV,QAAQ,GAAGI,IAAI,CAACM,KAAK,CAAC;QAC1B,IAAIjB,QAAQ,GAAGO,QAAQ,CAACT,aAAa,CAAC;QACtC,IAAIqB,KAAK,GAAGP,OAAO,IAAIT,gBAAgB,CAACF,cAAc,EAAEV,eAAe,CAACgB,QAAQ,CAAC,CAAC;QAClF,IAAIa,SAAS,GAAGV,GAAG,CAACV,QAAQ,IAAI,EAAE,EAAEmB,KAAK,CAAC;QAC1C,IAAIA,KAAK,IAAIC,SAAS,CAACN,MAAM,EAAE;UAC7BE,GAAG,CAACK,IAAI,CAAChC,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEkB,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAEnB,eAAe,CAAC,CAAC,CAAC,EAAEU,aAAa,EAAEsB,SAAS,CAAC,CAAC,CAAC;QACzG;MACF;MACA,OAAOJ,GAAG;IACZ;IACA,OAAON,GAAG,CAAClB,QAAQ,CAACO,KAAK,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}