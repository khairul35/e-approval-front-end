{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"title\", \"icon\", \"switcherIcon\"];\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _slots$title, _slots$icon, _slots$switcherIcon, _slots$default;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        props[camelize(k)] = v;\n      }\n      var isLeaf = props.isLeaf,\n        checkable = props.checkable,\n        selectable = props.selectable,\n        disabled = props.disabled,\n        disableCheckbox = props.disableCheckbox;\n      // 默认值为 undefined\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      var slotsProps = _objectSpread(_objectSpread({}, props), newProps);\n      var _props$title = props.title,\n        title = _props$title === void 0 ? (_slots$title = slots.title) === null || _slots$title === void 0 ? void 0 : _slots$title.call(slots, slotsProps) : _props$title,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? (_slots$icon = slots.icon) === null || _slots$icon === void 0 ? void 0 : _slots$icon.call(slots, slotsProps) : _props$icon,\n        _props$switcherIcon = props.switcherIcon,\n        switcherIcon = _props$switcherIcon === void 0 ? (_slots$switcherIcon = slots.switcherIcon) === null || _slots$switcherIcon === void 0 ? void 0 : _slots$switcherIcon.call(slots, slotsProps) : _props$switcherIcon,\n        rest = _objectWithoutProperties(props, _excluded);\n      var children = (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots);\n      var dataNode = _objectSpread(_objectSpread({}, rest), {}, {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }, newProps);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n    selectedKeysSet = _ref3.selectedKeysSet,\n    loadedKeysSet = _ref3.loadedKeysSet,\n    loadingKeysSet = _ref3.loadingKeysSet,\n    checkedKeysSet = _ref3.checkedKeysSet,\n    halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _objectSpread(_objectSpread({\n    dataRef: data\n  }, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_objectWithoutProperties","_objectSpread","_slicedToArray","_excluded","getPosition","isTreeNode","warning","camelize","filterEmpty","omit","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_slots$title","_slots$icon","_slots$switcherIcon","_slots$default","slots","props","_i","_Object$entries","Object","entries","_Object$entries$_i","k","v","isLeaf","checkable","selectable","disabled","disableCheckbox","newProps","slotsProps","_props$title","call","_props$icon","icon","_props$switcherIcon","switcherIcon","rest","default","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","i","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","expandedKeysSet","selectedKeysSet","loadedKeysSet","loadingKeysSet","checkedKeysSet","halfCheckedKeysSet","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","dataRef","defineProperty","get"],"sources":["/Users/dev/e-approver/node_modules/ant-design-vue/es/vc-tree/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"title\", \"icon\", \"switcherIcon\"];\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize } from 'vue';\nimport { filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var treeNodes = filterEmpty(node);\n    return treeNodes.map(function (treeNode) {\n      var _slots$title, _slots$icon, _slots$switcherIcon, _slots$default;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var slots = treeNode.children || {};\n      var key = treeNode.key;\n      var props = {};\n      for (var _i = 0, _Object$entries = Object.entries(treeNode.props); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        props[camelize(k)] = v;\n      }\n      var isLeaf = props.isLeaf,\n        checkable = props.checkable,\n        selectable = props.selectable,\n        disabled = props.disabled,\n        disableCheckbox = props.disableCheckbox;\n      // 默认值为 undefined\n      var newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      var slotsProps = _objectSpread(_objectSpread({}, props), newProps);\n      var _props$title = props.title,\n        title = _props$title === void 0 ? (_slots$title = slots.title) === null || _slots$title === void 0 ? void 0 : _slots$title.call(slots, slotsProps) : _props$title,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? (_slots$icon = slots.icon) === null || _slots$icon === void 0 ? void 0 : _slots$icon.call(slots, slotsProps) : _props$icon,\n        _props$switcherIcon = props.switcherIcon,\n        switcherIcon = _props$switcherIcon === void 0 ? (_slots$switcherIcon = slots.switcherIcon) === null || _slots$switcherIcon === void 0 ? void 0 : _slots$switcherIcon.call(slots, slotsProps) : _props$switcherIcon,\n        rest = _objectWithoutProperties(props, _excluded);\n      var children = (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots);\n      var dataNode = _objectSpread(_objectSpread({}, rest), {}, {\n        title: title,\n        icon: icon,\n        switcherIcon: switcherIcon,\n        key: key,\n        isLeaf: isLeaf\n      }, newProps);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeysSet = _ref3.expandedKeysSet,\n    selectedKeysSet = _ref3.selectedKeysSet,\n    loadedKeysSet = _ref3.loadedKeysSet,\n    loadingKeysSet = _ref3.loadingKeysSet,\n    checkedKeysSet = _ref3.checkedKeysSet,\n    halfCheckedKeysSet = _ref3.halfCheckedKeysSet,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _objectSpread(_objectSpread({\n    dataRef: data\n  }, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    eventKey: eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}