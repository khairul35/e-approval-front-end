{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { shallowRef, watch, toRaw } from 'vue';\nimport { convertChildrenToData } from '../utils/legacyUtil';\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = [];\n  // Fill in the map\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  });\n  // Connect tree\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey];\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\nexport default function useTreeData(treeData, children, simpleMode) {\n  var mergedTreeData = shallowRef();\n  watch([simpleMode, treeData, children], function () {\n    var simpleModeValue = simpleMode.value;\n    if (treeData.value) {\n      mergedTreeData.value = simpleMode.value ? parseSimpleTreeData(toRaw(treeData.value), _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleModeValue !== true ? simpleModeValue : {})) : toRaw(treeData.value).slice();\n    } else {\n      mergedTreeData.value = convertChildrenToData(toRaw(children.value));\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return mergedTreeData;\n}","map":{"version":3,"names":["_objectSpread","shallowRef","watch","toRaw","convertChildrenToData","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","useTreeData","simpleMode","mergedTreeData","simpleModeValue","value","slice","immediate","deep"],"sources":["/Users/dev/e-approver/node_modules/ant-design-vue/es/vc-tree-select/hooks/useTreeData.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { shallowRef, watch, toRaw } from 'vue';\nimport { convertChildrenToData } from '../utils/legacyUtil';\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = [];\n  // Fill in the map\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  });\n  // Connect tree\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey];\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\nexport default function useTreeData(treeData, children, simpleMode) {\n  var mergedTreeData = shallowRef();\n  watch([simpleMode, treeData, children], function () {\n    var simpleModeValue = simpleMode.value;\n    if (treeData.value) {\n      mergedTreeData.value = simpleMode.value ? parseSimpleTreeData(toRaw(treeData.value), _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleModeValue !== true ? simpleModeValue : {})) : toRaw(treeData.value).slice();\n    } else {\n      mergedTreeData.value = convertChildrenToData(toRaw(children.value));\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return mergedTreeData;\n}"],"mappings":";AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,QAAQ,KAAK;AAC9C,SAASC,qBAAqB,QAAQ,qBAAqB;AAC3D,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC3C,IAAIC,EAAE,GAAGD,IAAI,CAACC,EAAE;IACdC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,OAAO,GAAGH,IAAI,CAACG,OAAO;EACxB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,YAAY,GAAG,EAAE;EACrB;EACA,IAAIC,QAAQ,GAAGP,QAAQ,CAACQ,GAAG,CAAC,UAAUC,IAAI,EAAE;IAC1C,IAAIC,KAAK,GAAGhB,aAAa,CAAC,CAAC,CAAC,EAAEe,IAAI,CAAC;IACnC,IAAIE,GAAG,GAAGD,KAAK,CAACR,EAAE,CAAC;IACnBG,QAAQ,CAACM,GAAG,CAAC,GAAGD,KAAK;IACrBA,KAAK,CAACC,GAAG,GAAGD,KAAK,CAACC,GAAG,IAAIA,GAAG;IAC5B,OAAOD,KAAK;EACd,CAAC,CAAC;EACF;EACAH,QAAQ,CAACK,OAAO,CAAC,UAAUH,IAAI,EAAE;IAC/B,IAAII,SAAS,GAAGJ,IAAI,CAACN,GAAG,CAAC;IACzB,IAAIW,MAAM,GAAGT,QAAQ,CAACQ,SAAS,CAAC;IAChC;IACA,IAAIC,MAAM,EAAE;MACVA,MAAM,CAACC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,IAAI,EAAE;MACvCD,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACP,IAAI,CAAC;IAC5B;IACA;IACA,IAAII,SAAS,KAAKT,OAAO,IAAI,CAACU,MAAM,IAAIV,OAAO,KAAK,IAAI,EAAE;MACxDE,YAAY,CAACU,IAAI,CAACP,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;EACF,OAAOH,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,SAASW,WAAWA,CAACjB,QAAQ,EAAEe,QAAQ,EAAEG,UAAU,EAAE;EAClE,IAAIC,cAAc,GAAGxB,UAAU,EAAE;EACjCC,KAAK,CAAC,CAACsB,UAAU,EAAElB,QAAQ,EAAEe,QAAQ,CAAC,EAAE,YAAY;IAClD,IAAIK,eAAe,GAAGF,UAAU,CAACG,KAAK;IACtC,IAAIrB,QAAQ,CAACqB,KAAK,EAAE;MAClBF,cAAc,CAACE,KAAK,GAAGH,UAAU,CAACG,KAAK,GAAGtB,mBAAmB,CAACF,KAAK,CAACG,QAAQ,CAACqB,KAAK,CAAC,EAAE3B,aAAa,CAAC;QACjGQ,EAAE,EAAE,IAAI;QACRC,GAAG,EAAE,KAAK;QACVC,OAAO,EAAE;MACX,CAAC,EAAEgB,eAAe,KAAK,IAAI,GAAGA,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGvB,KAAK,CAACG,QAAQ,CAACqB,KAAK,CAAC,CAACC,KAAK,EAAE;IACtF,CAAC,MAAM;MACLH,cAAc,CAACE,KAAK,GAAGvB,qBAAqB,CAACD,KAAK,CAACkB,QAAQ,CAACM,KAAK,CAAC,CAAC;IACrE;EACF,CAAC,EAAE;IACDE,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,OAAOL,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}